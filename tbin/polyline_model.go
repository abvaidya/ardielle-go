//
// This file generated by rdl v0.7.7 2015-05-14T19:53:06Z
//

package tbin

import (
	"encoding/json"
	"fmt"
	"testing"
)

var _ = testing.Verbose
var _ = json.Marshal
var _ = fmt.Printf

//
// Point -
//
type Point struct {
	X int32 `json:"x"`
	Y int32 `json:"y"`
}

//
// NewPoint - creates an initialized Point instance, returns a pointer to it
//
func NewPoint(init ...*Point) *Point {
	var o *Point
	if len(init) == 1 {
		o = init[0]
	} else {
		o = new(Point)
	}
	return o
}

type rawPoint Point

//
// UnmarshalJSON is defined for proper JSON decoding of a Point
//
func (pTypeDef *Point) UnmarshalJSON(b []byte) error {
	var r rawPoint
	err := json.Unmarshal(b, &r)
	if err == nil {
		o := Point(r)
		*pTypeDef = o
		err = pTypeDef.Validate()
	}
	return err
}

//
// Validate - checks for missing required fields, etc
//
func (pTypeDef *Point) Validate() error {
	return nil
}

//
// Polyline -
//
type Polyline struct {
	Points []*Point `json:"points"`
}

//
// NewPolyline - creates an initialized Polyline instance, returns a pointer to it
//
func NewPolyline(init ...*Polyline) *Polyline {
	var o *Polyline
	if len(init) == 1 {
		o = init[0]
	} else {
		o = new(Polyline)
	}
	return o.Init()
}

//
// Init - sets up the instance according to its default field values, if any
//
func (pTypeDef *Polyline) Init() *Polyline {
	if pTypeDef.Points == nil {
		pTypeDef.Points = make([]*Point, 0)
	}
	return pTypeDef
}

type rawPolyline Polyline

//
// UnmarshalJSON is defined for proper JSON decoding of a Polyline
//
func (pTypeDef *Polyline) UnmarshalJSON(b []byte) error {
	var r rawPolyline
	err := json.Unmarshal(b, &r)
	if err == nil {
		o := Polyline(r)
		*pTypeDef = *((&o).Init())
		err = pTypeDef.Validate()
	}
	return err
}

//
// Validate - checks for missing required fields, etc
//
func (pTypeDef *Polyline) Validate() error {
	if pTypeDef.Points == nil {
		return fmt.Errorf("Polyline: Missing required field: points")
	}
	return nil
}

//
// Rect -
//
type Rect struct {
	P1 *Point `json:"p1"`
	P2 *Point `json:"p2"`
}

//
// NewRect - creates an initialized Rect instance, returns a pointer to it
//
func NewRect(init ...*Rect) *Rect {
	var o *Rect
	if len(init) == 1 {
		o = init[0]
	} else {
		o = new(Rect)
	}
	return o.Init()
}

//
// Init - sets up the instance according to its default field values, if any
//
func (pTypeDef *Rect) Init() *Rect {
	if pTypeDef.P1 == nil {
		pTypeDef.P1 = NewPoint()
	}
	if pTypeDef.P2 == nil {
		pTypeDef.P2 = NewPoint()
	}
	return pTypeDef
}

type rawRect Rect

//
// UnmarshalJSON is defined for proper JSON decoding of a Rect
//
func (pTypeDef *Rect) UnmarshalJSON(b []byte) error {
	var r rawRect
	err := json.Unmarshal(b, &r)
	if err == nil {
		o := Rect(r)
		*pTypeDef = *((&o).Init())
		err = pTypeDef.Validate()
	}
	return err
}

//
// Validate - checks for missing required fields, etc
//
func (pTypeDef *Rect) Validate() error {
	if pTypeDef.P1 == nil {
		return fmt.Errorf("Rect: Missing required field: p1")
	}
	if pTypeDef.P2 == nil {
		return fmt.Errorf("Rect: Missing required field: p2")
	}
	return nil
}

//
// ShapeVariantTag - generated to support Shape
//
type ShapeVariantTag int

//
// Supporting constants
//
const (
	_ ShapeVariantTag = iota
	ShapeVariantPolyline
	ShapeVariantRect
)

//
// Shape -
//
type Shape struct {
	Variant  ShapeVariantTag `rdl:"union"`
	Polyline *Polyline
	Rect     *Rect
}

func (u Shape) String() string {
	switch u.Variant {
	case ShapeVariantPolyline:
		return fmt.Sprintf("%v", u.Polyline)
	case ShapeVariantRect:
		return fmt.Sprintf("%v", u.Rect)
	default:
		return "<Shape uninitialized>"
	}
}

//
// MarshalJSON for Shape
//
func (u Shape) MarshalJSON() ([]byte, error) {
	switch u.Variant {
	case ShapeVariantPolyline:
		return json.Marshal(u.Polyline)
	case ShapeVariantRect:
		return json.Marshal(u.Rect)
	default:
		return nil, fmt.Errorf("Cannot marshal uninitialized union type Shape")
	}
}

func checkShapeStructFields(repr map[string]interface{}, fields map[string]bool) bool {
	for name, required := range fields {
		if _, present := repr[name]; required && !present {
			return false
		}
	}
	for name := range repr {
		if _, ok := fields[name]; !ok {
			return false
		}
	}
	return true
}

func makeShapeVariantPolyline(b []byte, u *Shape, fields map[string]interface{}) bool {
	if checkShapeStructFields(fields, map[string]bool{"points": true}) {
		var o Polyline
		if err := json.Unmarshal(b, &o); err == nil {
			up := new(Shape)
			up.Variant = ShapeVariantPolyline
			up.Polyline = &o
			*u = *up
			return true
		}
	}
	return false
}

func makeShapeVariantRect(b []byte, u *Shape, fields map[string]interface{}) bool {
	if checkShapeStructFields(fields, map[string]bool{"p1": true, "p2": true}) {
		var o Rect
		if err := json.Unmarshal(b, &o); err == nil {
			up := new(Shape)
			up.Variant = ShapeVariantRect
			up.Rect = &o
			*u = *up
			return true
		}
	}
	return false
}

//
// UnmarshalJSON for Shape
//
func (u *Shape) UnmarshalJSON(b []byte) error {
	var tmp interface{}
	if err := json.Unmarshal(b, &tmp); err != nil {
		return err
	}
	switch v := tmp.(type) {
	case map[string]interface{}:
		if makeShapeVariantPolyline(b, u, v) {
			return nil
		}
		if makeShapeVariantRect(b, u, v) {
			return nil
		}
	}
	return fmt.Errorf("Cannot unmarshal JSON to union type Shape")
}

//
// Drawing -
//
type Drawing struct {
	Shapes []*Shape `json:"shapes"`
}

//
// NewDrawing - creates an initialized Drawing instance, returns a pointer to it
//
func NewDrawing(init ...*Drawing) *Drawing {
	var o *Drawing
	if len(init) == 1 {
		o = init[0]
	} else {
		o = new(Drawing)
	}
	return o.Init()
}

//
// Init - sets up the instance according to its default field values, if any
//
func (pTypeDef *Drawing) Init() *Drawing {
	if pTypeDef.Shapes == nil {
		pTypeDef.Shapes = make([]*Shape, 0)
	}
	return pTypeDef
}

type rawDrawing Drawing

//
// UnmarshalJSON is defined for proper JSON decoding of a Drawing
//
func (pTypeDef *Drawing) UnmarshalJSON(b []byte) error {
	var r rawDrawing
	err := json.Unmarshal(b, &r)
	if err == nil {
		o := Drawing(r)
		*pTypeDef = *((&o).Init())
		err = pTypeDef.Validate()
	}
	return err
}

//
// Validate - checks for missing required fields, etc
//
func (pTypeDef *Drawing) Validate() error {
	if pTypeDef.Shapes == nil {
		return fmt.Errorf("Drawing: Missing required field: shapes")
	}
	return nil
}
